#!/usr/bin/sbcl --script

(defun do-plot ( name )
  (sb-ext:run-program "/usr/bin/gnuplot"
		      (list (concatenate 'string
					 "/var/measurement/" name ".script"))))

(defun get-CO2-or-eTVOC (string0 string1)
  (parse-integer
   (concatenate 'string (subseq string0 2) (subseq string1 2)) :radix 16))

(defun calculate-t-fine ( adc-T dig-T1 dig-T2 dig-T3 )
  (let (var1 var2)
    (setf var1 (* (- (/ adc-T 16384.0) (/ dig-T1 1024.0)) dig-T2 ))
    (setf var2 (* (- (/ adc-T 131972.0) (/ dig-T1 8192.0))
		  (- (/ adc-T 131072.0) (/ dig-T1 8192.0)) dig-T3))
    (+ var1 var2)))

(defun calculate-temp ( adc-T dig-T1 dig-T2 dig-T3 )
  (/ (get-t-fine adc-T dig-T1 dig-T2 dig-T3) 5120.0))

(defun make-plist (data-string line-prefix counter)
  (cond
    ((string-equal "0" line-prefix)
     (cond
       ((= 0 counter) (list :00 data-string))
       ((= 1 counter) (list :01 data-string))
       ((= 2 counter) (list :02 data-string))
       ((= 3 counter) (list :03 data-string))
       ((= 4 counter) (list :04 data-string))
       ((= 5 counter) (list :05 data-string))
       ((= 6 counter) (list :06 data-string))
       ((= 7 counter) (list :07 data-string))
       ((= 8 counter) (list :08 data-string))
       ((= 9 counter) (list :09 data-string))
       ((= 10 counter) (list :0a data-string))
       ((= 11 counter) (list :0b data-string))
       ((= 12 counter) (list :0c data-string))
       ((= 13 counter) (list :0d data-string))
       ((= 14 counter) (list :0e data-string))
       ((= 15 counter) (list :0f data-string))))
    ((string-equal "1" line-prefix)
     (cond
       ((= 0 counter) (list :10 data-string))
       ((= 1 counter) (list :11 data-string))
       ((= 2 counter) (list :12 data-string))
       ((= 3 counter) (list :13 data-string))
       ((= 4 counter) (list :14 data-string))
       ((= 5 counter) (list :15 data-string))
       ((= 6 counter) (list :16 data-string))
       ((= 7 counter) (list :17 data-string))
       ((= 8 counter) (list :18 data-string))
       ((= 9 counter) (list :19 data-string))
       ((= 10 counter) (list :1a data-string))
       ((= 11 counter) (list :1b data-string))
       ((= 12 counter) (list :1c data-string))
       ((= 13 counter) (list :1d data-string))
       ((= 14 counter) (list :1e data-string))
       ((= 15 counter) (list :1f data-string))))
    ((string-equal "2" line-prefix)
     (cond
       ((= 0 counter) (list :20 data-string))
       ((= 1 counter) (list :21 data-string))
       ((= 2 counter) (list :22 data-string))
       ((= 3 counter) (list :23 data-string))
       ((= 4 counter) (list :24 data-string))
       ((= 5 counter) (list :25 data-string))
       ((= 6 counter) (list :26 data-string))
       ((= 7 counter) (list :27 data-string))
       ((= 8 counter) (list :28 data-string))
       ((= 9 counter) (list :29 data-string))
       ((= 10 counter) (list :2a data-string))
       ((= 11 counter) (list :2b data-string))
       ((= 12 counter) (list :2c data-string))
       ((= 13 counter) (list :2d data-string))
       ((= 14 counter) (list :2e data-string))
       ((= 15 counter) (list :2f data-string))))
    ((string-equal "3" line-prefix)
     (cond
       ((= 0 counter) (list :30 data-string))
       ((= 1 counter) (list :31 data-string))
       ((= 2 counter) (list :32 data-string))
       ((= 3 counter) (list :33 data-string))
       ((= 4 counter) (list :34 data-string))
       ((= 5 counter) (list :35 data-string))
       ((= 6 counter) (list :36 data-string))
       ((= 7 counter) (list :37 data-string))
       ((= 8 counter) (list :38 data-string))
       ((= 9 counter) (list :39 data-string))
       ((= 10 counter) (list :3a data-string))
       ((= 11 counter) (list :3b data-string))
       ((= 12 counter) (list :3c data-string))
       ((= 13 counter) (list :3d data-string))
       ((= 14 counter) (list :3e data-string))
       ((= 15 counter) (list :3f data-string))))
    ((string-equal "4" line-prefix)
     (cond
       ((= 0 counter) (list :40 data-string))
       ((= 1 counter) (list :41 data-string))
       ((= 2 counter) (list :42 data-string))
       ((= 3 counter) (list :43 data-string))
       ((= 4 counter) (list :44 data-string))
       ((= 5 counter) (list :45 data-string))
       ((= 6 counter) (list :46 data-string))
       ((= 7 counter) (list :47 data-string))
       ((= 8 counter) (list :48 data-string))
       ((= 9 counter) (list :49 data-string))
       ((= 10 counter) (list :4a data-string))
       ((= 11 counter) (list :4b data-string))
       ((= 12 counter) (list :4c data-string))
       ((= 13 counter) (list :4d data-string))
       ((= 14 counter) (list :4e data-string))
       ((= 15 counter) (list :4f data-string))))
    ((string-equal "5" line-prefix)
     (cond
       ((= 0 counter) (list :50 data-string))
       ((= 1 counter) (list :51 data-string))
       ((= 2 counter) (list :52 data-string))
       ((= 3 counter) (list :53 data-string))
       ((= 4 counter) (list :54 data-string))
       ((= 5 counter) (list :55 data-string))
       ((= 6 counter) (list :56 data-string))
       ((= 7 counter) (list :57 data-string))
       ((= 8 counter) (list :58 data-string))
       ((= 9 counter) (list :59 data-string))
       ((= 10 counter) (list :5a data-string))
       ((= 11 counter) (list :5b data-string))
       ((= 12 counter) (list :5c data-string))
       ((= 13 counter) (list :5d data-string))
       ((= 14 counter) (list :5e data-string))
       ((= 15 counter) (list :5f data-string))))
    ((string-equal "6" line-prefix)
     (cond
       ((= 0 counter) (list :60 data-string))
       ((= 1 counter) (list :61 data-string))
       ((= 2 counter) (list :62 data-string))
       ((= 3 counter) (list :63 data-string))
       ((= 4 counter) (list :64 data-string))
       ((= 5 counter) (list :65 data-string))
       ((= 6 counter) (list :66 data-string))
       ((= 7 counter) (list :67 data-string))
       ((= 8 counter) (list :68 data-string))
       ((= 9 counter) (list :69 data-string))
       ((= 10 counter) (list :6a data-string))
       ((= 11 counter) (list :6b data-string))
       ((= 12 counter) (list :6c data-string))
       ((= 13 counter) (list :6d data-string))
       ((= 14 counter) (list :6e data-string))
       ((= 15 counter) (list :6f data-string))))
    ((string-equal "7" line-prefix)
     (cond
       ((= 0 counter) (list :70 data-string))
       ((= 1 counter) (list :71 data-string))
       ((= 2 counter) (list :72 data-string))
       ((= 3 counter) (list :73 data-string))
       ((= 4 counter) (list :74 data-string))
       ((= 5 counter) (list :75 data-string))
       ((= 6 counter) (list :76 data-string))
       ((= 7 counter) (list :77 data-string))
       ((= 8 counter) (list :78 data-string))
       ((= 9 counter) (list :79 data-string))
       ((= 10 counter) (list :7a data-string))
       ((= 11 counter) (list :7b data-string))
       ((= 12 counter) (list :7c data-string))
       ((= 13 counter) (list :7d data-string))
       ((= 14 counter) (list :7e data-string))
       ((= 15 counter) (list :7f data-string))))
    ((string-equal "8" line-prefix)
     (cond
       ((= 0 counter) (list :80 data-string))
       ((= 1 counter) (list :81 data-string))
       ((= 2 counter) (list :82 data-string))
       ((= 3 counter) (list :83 data-string))
       ((= 4 counter) (list :84 data-string))
       ((= 5 counter) (list :85 data-string))
       ((= 6 counter) (list :86 data-string))
       ((= 7 counter) (list :87 data-string))
       ((= 8 counter) (list :88 data-string))
       ((= 9 counter) (list :89 data-string))
       ((= 10 counter) (list :8a data-string))
       ((= 11 counter) (list :8b data-string))
       ((= 12 counter) (list :8c data-string))
       ((= 13 counter) (list :8d data-string))
       ((= 14 counter) (list :8e data-string))
       ((= 15 counter) (list :8f data-string))))
    ((string-equal "9" line-prefix)
     (cond
       ((= 0 counter) (list :90 data-string))
       ((= 1 counter) (list :91 data-string))
       ((= 2 counter) (list :92 data-string))
       ((= 3 counter) (list :93 data-string))
       ((= 4 counter) (list :94 data-string))
       ((= 5 counter) (list :95 data-string))
       ((= 6 counter) (list :96 data-string))
       ((= 7 counter) (list :97 data-string))
       ((= 8 counter) (list :98 data-string))
       ((= 9 counter) (list :99 data-string))
       ((= 10 counter) (list :9a data-string))
       ((= 11 counter) (list :9b data-string))
       ((= 12 counter) (list :9c data-string))
       ((= 13 counter) (list :9d data-string))
       ((= 14 counter) (list :9e data-string))
       ((= 15 counter) (list :9f data-string))))
    ((string-equal "a" line-prefix)
     (cond
       ((= 0 counter) (list :a0 data-string))
       ((= 1 counter) (list :a1 data-string))
       ((= 2 counter) (list :a2 data-string))
       ((= 3 counter) (list :a3 data-string))
       ((= 4 counter) (list :a4 data-string))
       ((= 5 counter) (list :a5 data-string))
       ((= 6 counter) (list :a6 data-string))
       ((= 7 counter) (list :a7 data-string))
       ((= 8 counter) (list :a8 data-string))
       ((= 9 counter) (list :a9 data-string))
       ((= 10 counter) (list :aa data-string))
       ((= 11 counter) (list :ab data-string))
       ((= 12 counter) (list :ac data-string))
       ((= 13 counter) (list :ad data-string))
       ((= 14 counter) (list :ae data-string))
       ((= 15 counter) (list :af data-string))))
    ((string-equal "b" line-prefix)
     (cond
       ((= 0 counter) (list :b0 data-string))
       ((= 1 counter) (list :b1 data-string))
       ((= 2 counter) (list :b2 data-string))
       ((= 3 counter) (list :b3 data-string))
       ((= 4 counter) (list :b4 data-string))
       ((= 5 counter) (list :b5 data-string))
       ((= 6 counter) (list :b6 data-string))
       ((= 7 counter) (list :b7 data-string))
       ((= 8 counter) (list :b8 data-string))
       ((= 9 counter) (list :b9 data-string))
       ((= 10 counter) (list :ba data-string))
       ((= 11 counter) (list :bb data-string))
       ((= 12 counter) (list :bc data-string))
       ((= 13 counter) (list :bd data-string))
       ((= 14 counter) (list :be data-string))
       ((= 15 counter) (list :bf data-string))))
    ((string-equal "c" line-prefix)
     (cond
       ((= 0 counter) (list :c0 data-string))
       ((= 1 counter) (list :c1 data-string))
       ((= 2 counter) (list :c2 data-string))
       ((= 3 counter) (list :c3 data-string))
       ((= 4 counter) (list :c4 data-string))
       ((= 5 counter) (list :c5 data-string))
       ((= 6 counter) (list :c6 data-string))
       ((= 7 counter) (list :c7 data-string))
       ((= 8 counter) (list :c8 data-string))
       ((= 9 counter) (list :c9 data-string))
       ((= 10 counter) (list :ca data-string))
       ((= 11 counter) (list :cb data-string))
       ((= 12 counter) (list :cc data-string))
       ((= 13 counter) (list :cd data-string))
       ((= 14 counter) (list :ce data-string))
       ((= 15 counter) (list :cf data-string))))
    ((string-equal "d" line-prefix)
     (cond
       ((= 0 counter) (list :d0 data-string))
       ((= 1 counter) (list :d1 data-string))
       ((= 2 counter) (list :d2 data-string))
       ((= 3 counter) (list :d3 data-string))
       ((= 4 counter) (list :d4 data-string))
       ((= 5 counter) (list :d5 data-string))
       ((= 6 counter) (list :d6 data-string))
       ((= 7 counter) (list :d7 data-string))
       ((= 8 counter) (list :d8 data-string))
       ((= 9 counter) (list :d9 data-string))
       ((= 10 counter) (list :da data-string))
       ((= 11 counter) (list :db data-string))
       ((= 12 counter) (list :dc data-string))
       ((= 13 counter) (list :dd data-string))
       ((= 14 counter) (list :de data-string))
       ((= 15 counter) (list :df data-string))))
    ((string-equal "e" line-prefix)
     (cond
       ((= 0 counter) (list :e0 data-string))
       ((= 1 counter) (list :e1 data-string))
       ((= 2 counter) (list :e2 data-string))
       ((= 3 counter) (list :e3 data-string))
       ((= 4 counter) (list :e4 data-string))
       ((= 5 counter) (list :e5 data-string))
       ((= 6 counter) (list :e6 data-string))
       ((= 7 counter) (list :e7 data-string))
       ((= 8 counter) (list :e8 data-string))
       ((= 9 counter) (list :e9 data-string))
       ((= 10 counter) (list :ea data-string))
       ((= 11 counter) (list :eb data-string))
       ((= 12 counter) (list :ec data-string))
       ((= 13 counter) (list :ed data-string))
       ((= 14 counter) (list :ee data-string))
       ((= 15 counter) (list :ef data-string))))
    ((string-equal "f" line-prefix)
     (cond
       ((= 0 counter) (list :f0 data-string))
       ((= 1 counter) (list :f1 data-string))
       ((= 2 counter) (list :f2 data-string))
       ((= 3 counter) (list :f3 data-string))
       ((= 4 counter) (list :f4 data-string))
       ((= 5 counter) (list :f5 data-string))
       ((= 6 counter) (list :f6 data-string))
       ((= 7 counter) (list :f7 data-string))
       ((= 8 counter) (list :f8 data-string))
       ((= 9 counter) (list :f9 data-string))
       ((= 10 counter) (list :fa data-string))
       ((= 11 counter) (list :fb data-string))
       ((= 12 counter) (list :fc data-string))
       ((= 13 counter) (list :fd data-string))
       ((= 14 counter) (list :fe data-string))
       ((= 15 counter) (list :ff data-string))))
    (T ()))
  )

(defun convert-line-to-list (read-string)
  (let ((prefix (subseq read-string 0 1))
	(workstring (subseq read-string 3))
	(ret ()))
    (dotimes (counter 16)
      (if (< 2 (length workstring))
	  (progn (setf workstring (subseq workstring 1))
		 (if (not (string-equal " " (subseq workstring 0 1)))
		     (progn
		       (setf ret (append ret
					 (make-plist
					  (subseq workstring 0 2)
					  prefix counter)))))
		       (setf workstring (subseq workstring 2)))))
    ret))

(defun read-dump-file (filename)
  (with-open-file (dump-data filename)
    (let ((ret ()) (current-string (read-line dump-data)))
      (do () ((eq current-string :eof))
	(if (not (search "0123456789abcdef" current-string))
	    (setf ret (append ret (convert-line-to-list current-string))))
	(setf current-string (read-line dump-data nil :eof)))
      ret)))

(defvar *trimming* (read-dump-file "/var/measurement/trimming"))

(defun get-dig-T1 ()
  (parse-integer
   (concatenate 'string (getf *trimming* :89)(getf *trimming* :88))
   :radix 16))

(defun get-dig-T2 ()
  (parse-integer
   (concatenate 'string (getf *trimming* :8B)(getf *trimming* :8A))
   :radix 16))

(defun get-dig-T3 ()
  (parse-integer
   (concatenate 'string (getf *trimming* :8D)(getf *trimming* :8C))
   :radix 16))

(defun get-temp (data-list)
  (calculate-temp (parse-integer (concatenate 'string
					      (getf data-list :FA)
					      (getf data-list :FB)
					      (subseq (getf data-list :fc)
						      0 1)) :radix 16)
		  (get-dig-t1) (get-dig-t2) (get-dig-t3)))

(defun reverse-bitorder (input-string)
  (if (= 0 (length input-string))
      ""
      (if (= 1 (length input-string))
	  (cond
	    ((string-equal "0" input-string) "0")
	    ((string-equal "1" input-string) "8")
	    ((string-equal "2" input-string) "4")
	    ((string-equal "3" input-string) "c")
	    ((string-equal "4" input-string) "2")
	    ((string-equal "5" input-string) "a")
	    ((string-equal "6" input-string) "6")
	    ((string-equal "7" input-string) "e")
	    ((string-equal "8" input-string) "1")
	    ((string-equal "9" input-string) "9")
	    ((string-equal "a" input-string) "5")
	    ((string-equal "b" input-string) "d")
	    ((string-equal "e" input-string) "7")
	    ((string-equal "f" input-string) "f")
	    ((string-equal "0" input-string) "0")
	    ((string-equal "0" input-string) "0"))
	  (concatenate 'string (reverse-bitorder (subseq input-string 0 1))
		       (reverse-bitorder (subseq input-string 1))))))

(defun make-site-contents ()
  (let ((current-values-CO2 ()) (current-values-eTVOC ())
	current-line last-CO2 last-eTVOC)
    (dotimes (i 100)
      (ignore-errors
	(with-open-file (file-input
			 (concatenate 'string "/var/measurement/CO2-sicher"
				      (format nil "~a" (- 99 i))))
	  (setf current-line (read-line file-input))
	  (setf current-values-CO2 (append current-values-CO2
				(list (get-CO2-or-eTVOC
				 (subseq current-line 0 4)
				 (subseq current-line 5 9)))))
	  (setf current-values-eTVOC (append current-values-eTVOC
				(list (get-CO2-or-eTVOC
				 (subseq current-line 10 14)
				 (subseq current-line 15 19))))))))
    (with-open-file (input-stream "/var/measurement/CO2-data")
      (setf current-line (read-line input-stream))
      (setf current-values-CO2 (append current-values-CO2
				(list (get-CO2-or-eTVOC
				 (subseq current-line 0 4)
				 (subseq current-line 5 9)))))
	  (setf current-values-eTVOC (append current-values-eTVOC
				(list (get-CO2-or-eTVOC
				 (subseq current-line 10 14)
				 (subseq current-line 15 19))))))
    (setf last-CO2 (first (last current-values-CO2)))
    (setf last-eTVOC (first (last current-values-eTVOC)))
    (with-open-file
	(CO2-output "/var/measurement/CO2.dat"
		    :direction :output :if-exists :supersede)
      (with-open-file (eTVOC-output "/var/measurement/eVOC.dat"
				    :direction :output :if-exists :supersede)
	(dotimes (i (length current-values-CO2))
	  (format CO2-output "~a ~a~%" i (nth i current-values-CO2))
	  (format eTVOC-output "~a ~a~%" i (nth i current-values-eTVOC)))))
    (with-open-file (site-output "/var/www/html/index.html"
				 :direction :output :if-exists :supersede)
      (format site-output "~a" "<HTML><HEAD><Title>Luftmesswerte</Title>")
      (format site-output "~a" "<META http-equiv=\"refresh\" content=\"60\">")
      (format site-output "~a"
	      "</HEAD><BODY><TABLE><TR><TD><H2>CO<sub>2</sub> Messwerte:</H2>")
      (format site-output "~a~a~a" "Aktueller CO<sub>2</sub> Messwert: "
	      last-CO2 " ppm." )
      (format site-output "~a~a~a" "<br>L&uuml;ften ist "
	      (if (> last-CO2 1000) "n&ouml;tig"
		  (if (> last-CO2 700) "ratsam" "nicht n&ouml;tig"))
	      ".</TD><TD>")
      (format site-output "~a" "die letzten CO<sub>2</sub> Messwerte:<BR>")
      (format site-output "~a"
	      "<IMG src=\"CO2.png\" alt=\"die letzten 100 Messwerte\">")
      (format site-output "~a" "</TD></TR><TR><TD>")
      (format site-output "~a"
	      "<H2>Menge an fl&uuml;chtigen organischen Stoffen:</H2>")
      (format site-output "~a~a~a" "Aktueller Messwert: " last-eTVOC " ppb.")
      (format site-output "~a" "</TD><TD>die letzten Messwerte:<BR><BR>")
      (format site-output "~a"
	      "<IMG src=\"eVOC.png\" alt=\"die letzten 100 Messwerte\">")
      (format site-output "~a" "</TD></TR>")
      (format site-output "~a" "</TABLE></BODY></HTML>")))
    (do-plot "CO2")
    (do-plot "eVOC"))

(make-site-contents)
